(function () {
  'use strict';

  const renderHorizontalBarChart = (svg, arr, xValue, yValue) => {    
    console.log(arr);
    const margin = {left:120, top:40, right:30, bottom:60};
    const width = +svg.attr('width') - margin.left - margin.right;
  	const height = +svg.attr('height') - margin.top - margin.bottom;

    //instance of d3 linear scale
    const xScale = d3.scaleLinear()
    	.domain([0,d3.max(arr, xValue)])
    	.range([0, width]);
    console.log(xScale.domain());
    console.log(xScale.range());
  	   
    const yScale = d3.scaleBand()
    	.domain(arr.map(yValue))
    	.range([0, height])
    	.padding(0.2);
    
    // Contry colors
    const names = arr.map(el => el.Country);
      const yColors = d3.scaleOrdinal()
    	.domain(names)
      .range(['#2d6a4f', '#40916c', '#52b788', '#74c69d', '#95d5b2']);  	  
    
    const g = svg.append('g')
    	.attr('transform', `translate(${margin.left},${margin.top})`);
    
    const yAxis = d3.axisLeft(yScale);
    yAxis(g.append('g'));  // invoke and action on d3 selection
    g.selectAll('.domain,.tick line')
    	.remove();
     console.log('Invoke action');
      
    const xTickFormat = number => d3.format('.3s')(number).replace('G','B');
    const xAxis = d3.axisBottom(xScale)
    	.tickFormat(xTickFormat)
    	.tickSize(`${-height + margin.top}`);
    
    // another way to invoke action on d3 selection
    const xAxisG = g.append('g').call(xAxis) 
    	.attr('transform', `translate(0, ${height})`);
    
    xAxisG
      .selectAll('text')
    	.attr("stroke", "darkblue")
    	.attr("y", "10");
     
    xAxisG
  		.append('text')
    	.attr('class', 'bottom-text')
    	.attr('x', `${width/2 - 0}`)
      .attr('y', '50')
    	.attr('fill', 'black')
    	.text('Population in millions');
    
    g.selectAll('rect')
    	.data(arr).enter().append('rect')
    		.attr('fill', d => yColors(d.Country))
    		.attr('y', d => yScale(yValue(d)))
    		.attr("width", d => xScale(xValue(d)))
    		.attr("height", yScale.bandwidth()); // bandwidth is a computed with of a single bar
    
    g.append('text')
    	.text("Top 5 Most Populated countries")
    	.attr("font-size", "1.5em");
  };
   
  // Send http, parse response, return array
  d3.csv('data.csv').then(data => {
    data.forEach(d => {d.Population=+d.Population * 1000;}); 
    renderHorizontalBarChart(d3.select('svg'), data, d => d.Population, d => d.Country);
  });

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlbmRlckhvcml6b250YWxCYXJDaGFydCA9IChzdmcsIGFyciwgeFZhbHVlLCB5VmFsdWUpID0+IHsgICAgXG4gIGNvbnNvbGUubG9nKGFycik7XG4gIGNvbnN0IG1hcmdpbiA9IHtsZWZ0OjEyMCwgdG9wOjQwLCByaWdodDozMCwgYm90dG9tOjYwfTtcbiAgY29uc3Qgd2lkdGggPSArc3ZnLmF0dHIoJ3dpZHRoJykgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcblx0Y29uc3QgaGVpZ2h0ID0gK3N2Zy5hdHRyKCdoZWlnaHQnKSAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuXG4gIC8vaW5zdGFuY2Ugb2YgZDMgbGluZWFyIHNjYWxlXG4gIGNvbnN0IHhTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgXHQuZG9tYWluKFswLGQzLm1heChhcnIsIHhWYWx1ZSldKVxuICBcdC5yYW5nZShbMCwgd2lkdGhdKTtcbiAgY29uc29sZS5sb2coeFNjYWxlLmRvbWFpbigpKTtcbiAgY29uc29sZS5sb2coeFNjYWxlLnJhbmdlKCkpO1xuXHQgICBcbiAgY29uc3QgeVNjYWxlID0gZDMuc2NhbGVCYW5kKClcbiAgXHQuZG9tYWluKGFyci5tYXAoeVZhbHVlKSlcbiAgXHQucmFuZ2UoWzAsIGhlaWdodF0pXG4gIFx0LnBhZGRpbmcoMC4yKTtcbiAgXG4gIC8vIENvbnRyeSBjb2xvcnNcbiAgY29uc3QgbmFtZXMgPSBhcnIubWFwKGVsID0+IGVsLkNvdW50cnkpO1xuICAgIGNvbnN0IHlDb2xvcnMgPSBkMy5zY2FsZU9yZGluYWwoKVxuICBcdC5kb21haW4obmFtZXMpXG4gICAgLnJhbmdlKFsnIzJkNmE0ZicsICcjNDA5MTZjJywgJyM1MmI3ODgnLCAnIzc0YzY5ZCcsICcjOTVkNWIyJ10pOyAgXHQgIFxuICBcbiAgY29uc3QgZyA9IHN2Zy5hcHBlbmQoJ2cnKVxuICBcdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XG4gIFxuICBjb25zdCB5QXhpcyA9IGQzLmF4aXNMZWZ0KHlTY2FsZSk7XG4gIHlBeGlzKGcuYXBwZW5kKCdnJykpOyAgLy8gaW52b2tlIGFuZCBhY3Rpb24gb24gZDMgc2VsZWN0aW9uXG4gIGcuc2VsZWN0QWxsKCcuZG9tYWluLC50aWNrIGxpbmUnKVxuICBcdC5yZW1vdmUoKTtcbiAgIGNvbnNvbGUubG9nKCdJbnZva2UgYWN0aW9uJyk7XG4gICAgXG4gIGNvbnN0IHhUaWNrRm9ybWF0ID0gbnVtYmVyID0+IGQzLmZvcm1hdCgnLjNzJykobnVtYmVyKS5yZXBsYWNlKCdHJywnQicpO1xuICBjb25zdCB4QXhpcyA9IGQzLmF4aXNCb3R0b20oeFNjYWxlKVxuICBcdC50aWNrRm9ybWF0KHhUaWNrRm9ybWF0KVxuICBcdC50aWNrU2l6ZShgJHstaGVpZ2h0ICsgbWFyZ2luLnRvcH1gKVxuICBcbiAgLy8gYW5vdGhlciB3YXkgdG8gaW52b2tlIGFjdGlvbiBvbiBkMyBzZWxlY3Rpb25cbiAgY29uc3QgeEF4aXNHID0gZy5hcHBlbmQoJ2cnKS5jYWxsKHhBeGlzKSBcbiAgXHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCAke2hlaWdodH0pYCk7XG4gIFxuICB4QXhpc0dcbiAgICAuc2VsZWN0QWxsKCd0ZXh0JylcbiAgXHQuYXR0cihcInN0cm9rZVwiLCBcImRhcmtibHVlXCIpXG4gIFx0LmF0dHIoXCJ5XCIsIFwiMTBcIik7XG4gICBcbiAgeEF4aXNHXG5cdFx0LmFwcGVuZCgndGV4dCcpXG4gIFx0LmF0dHIoJ2NsYXNzJywgJ2JvdHRvbS10ZXh0JylcbiAgXHQuYXR0cigneCcsIGAke3dpZHRoLzIgLSAwfWApXG4gICAgLmF0dHIoJ3knLCAnNTAnKVxuICBcdC5hdHRyKCdmaWxsJywgJ2JsYWNrJylcbiAgXHQudGV4dCgnUG9wdWxhdGlvbiBpbiBtaWxsaW9ucycpO1xuICBcbiAgZy5zZWxlY3RBbGwoJ3JlY3QnKVxuICBcdC5kYXRhKGFycikuZW50ZXIoKS5hcHBlbmQoJ3JlY3QnKVxuICBcdFx0LmF0dHIoJ2ZpbGwnLCBkID0+IHlDb2xvcnMoZC5Db3VudHJ5KSlcbiAgXHRcdC5hdHRyKCd5JywgZCA9PiB5U2NhbGUoeVZhbHVlKGQpKSlcbiAgXHRcdC5hdHRyKFwid2lkdGhcIiwgZCA9PiB4U2NhbGUoeFZhbHVlKGQpKSlcbiAgXHRcdC5hdHRyKFwiaGVpZ2h0XCIsIHlTY2FsZS5iYW5kd2lkdGgoKSk7IC8vIGJhbmR3aWR0aCBpcyBhIGNvbXB1dGVkIHdpdGggb2YgYSBzaW5nbGUgYmFyXG4gIFxuICBnLmFwcGVuZCgndGV4dCcpXG4gIFx0LnRleHQoXCJUb3AgNSBNb3N0IFBvcHVsYXRlZCBjb3VudHJpZXNcIilcbiAgXHQuYXR0cihcImZvbnQtc2l6ZVwiLCBcIjEuNWVtXCIpXG59XG4gXG4vLyBTZW5kIGh0dHAsIHBhcnNlIHJlc3BvbnNlLCByZXR1cm4gYXJyYXlcbmQzLmNzdignZGF0YS5jc3YnKS50aGVuKGRhdGEgPT4ge1xuICBkYXRhLmZvckVhY2goZCA9PiB7ZC5Qb3B1bGF0aW9uPStkLlBvcHVsYXRpb24gKiAxMDAwfSk7IFxuICByZW5kZXJIb3Jpem9udGFsQmFyQ2hhcnQoZDMuc2VsZWN0KCdzdmcnKSwgZGF0YSwgZCA9PiBkLlBvcHVsYXRpb24sIGQgPT4gZC5Db3VudHJ5KTtcbn0pO1xuXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0VBQUEsTUFBTSx3QkFBd0IsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sS0FBSztFQUMvRCxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDbkIsRUFBRSxNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUN6RCxFQUFFLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7RUFDaEUsQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2pFO0VBQ0E7RUFDQSxFQUFFLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUU7RUFDakMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUNuQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQ3RCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztFQUMvQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7RUFDOUI7RUFDQSxFQUFFLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUU7RUFDL0IsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUMzQixJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztFQUN0QixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNqQjtFQUNBO0VBQ0EsRUFBRSxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDMUMsSUFBSSxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxFQUFFO0VBQ3JDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztFQUNqQixLQUFLLEtBQUssQ0FBQyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0VBQ3BFO0VBQ0EsRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztFQUMzQixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2pFO0VBQ0EsRUFBRSxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0VBQ3BDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUN2QixFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUM7RUFDbkMsSUFBSSxNQUFNLEVBQUUsQ0FBQztFQUNiLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztFQUNoQztFQUNBLEVBQUUsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUMxRSxFQUFFLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO0VBQ3JDLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQztFQUMzQixJQUFJLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUM7RUFDdkM7RUFDQTtFQUNBLEVBQUUsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0VBQzFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNqRDtFQUNBLEVBQUUsTUFBTTtFQUNSLEtBQUssU0FBUyxDQUFDLE1BQU0sQ0FBQztFQUN0QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDO0VBQzlCLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztFQUNwQjtFQUNBLEVBQUUsTUFBTTtFQUNSLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztFQUNqQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDO0VBQ2hDLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQy9CLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUM7RUFDcEIsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQztFQUN6QixJQUFJLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0VBQ25DO0VBQ0EsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztFQUNyQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0VBQ3BDLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUMxQyxLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN0QyxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMxQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7RUFDeEM7RUFDQSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0VBQ2xCLElBQUksSUFBSSxDQUFDLGdDQUFnQyxDQUFDO0VBQzFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUM7RUFDOUIsRUFBQztFQUNEO0VBQ0E7RUFDQSxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUk7RUFDaEMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLEtBQUksQ0FBQyxDQUFDLENBQUM7RUFDekQsRUFBRSx3QkFBd0IsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQ3RGLENBQUMsQ0FBQzs7OzsifQ==